{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Coursera Applied Data Science Capstone project"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## This notebook will be mainly used for the Capstone project that uses the accidents data from Seattle city"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Capstone Project Course!\n"
     ]
    }
   ],
   "source": [
    "print (\"Hello Capstone Project Course!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Business Understanding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The problem statement is to predict the severity of road accidents caused by various factors in Seattle City. The accurate prediction of accident severity will be of great help to the following target audience. \n",
    "\n",
    "### 1. City administration\n",
    "The Seattle City administration can use the predictions to come up with various precautionary measures such as introduction of speed breakers, setting up speed limits, deploying more traffic control teams etc. in areas that are more prone to accidents. The administration can also look for factors other than location to come up with awareness campaigns for city dwellers on how to drive carefully in order to avoid accidents.\n",
    "\n",
    "### 2. Emergency response teams\n",
    "Emergency reponse teams can be stationed near high accident prone areas in order to quickly help the victims of accidents so that they are taken to hospitals on time to save lives. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Understanding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3063: DtypeWarning: Columns (33) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SEVERITYCODE</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>OBJECTID</th>\n",
       "      <th>INCKEY</th>\n",
       "      <th>COLDETKEY</th>\n",
       "      <th>REPORTNO</th>\n",
       "      <th>STATUS</th>\n",
       "      <th>ADDRTYPE</th>\n",
       "      <th>INTKEY</th>\n",
       "      <th>...</th>\n",
       "      <th>ROADCOND</th>\n",
       "      <th>LIGHTCOND</th>\n",
       "      <th>PEDROWNOTGRNT</th>\n",
       "      <th>SDOTCOLNUM</th>\n",
       "      <th>SPEEDING</th>\n",
       "      <th>ST_COLCODE</th>\n",
       "      <th>ST_COLDESC</th>\n",
       "      <th>SEGLANEKEY</th>\n",
       "      <th>CROSSWALKKEY</th>\n",
       "      <th>HITPARKEDCAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>-122.323148</td>\n",
       "      <td>47.703140</td>\n",
       "      <td>1</td>\n",
       "      <td>1307</td>\n",
       "      <td>1307</td>\n",
       "      <td>3502005</td>\n",
       "      <td>Matched</td>\n",
       "      <td>Intersection</td>\n",
       "      <td>37475.0</td>\n",
       "      <td>...</td>\n",
       "      <td>Wet</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10</td>\n",
       "      <td>Entering at angle</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>-122.347294</td>\n",
       "      <td>47.647172</td>\n",
       "      <td>2</td>\n",
       "      <td>52200</td>\n",
       "      <td>52200</td>\n",
       "      <td>2607959</td>\n",
       "      <td>Matched</td>\n",
       "      <td>Block</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Wet</td>\n",
       "      <td>Dark - Street Lights On</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6354039.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "      <td>From same direction - both going straight - bo...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>-122.334540</td>\n",
       "      <td>47.607871</td>\n",
       "      <td>3</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>1482393</td>\n",
       "      <td>Matched</td>\n",
       "      <td>Block</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Dry</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4323031.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32</td>\n",
       "      <td>One parked--one moving</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>-122.334803</td>\n",
       "      <td>47.604803</td>\n",
       "      <td>4</td>\n",
       "      <td>1144</td>\n",
       "      <td>1144</td>\n",
       "      <td>3503937</td>\n",
       "      <td>Matched</td>\n",
       "      <td>Block</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Dry</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23</td>\n",
       "      <td>From same direction - all others</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>-122.306426</td>\n",
       "      <td>47.545739</td>\n",
       "      <td>5</td>\n",
       "      <td>17700</td>\n",
       "      <td>17700</td>\n",
       "      <td>1807429</td>\n",
       "      <td>Matched</td>\n",
       "      <td>Intersection</td>\n",
       "      <td>34387.0</td>\n",
       "      <td>...</td>\n",
       "      <td>Wet</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4028032.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10</td>\n",
       "      <td>Entering at angle</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   SEVERITYCODE           X          Y  OBJECTID  INCKEY  COLDETKEY REPORTNO  \\\n",
       "0             2 -122.323148  47.703140         1    1307       1307  3502005   \n",
       "1             1 -122.347294  47.647172         2   52200      52200  2607959   \n",
       "2             1 -122.334540  47.607871         3   26700      26700  1482393   \n",
       "3             1 -122.334803  47.604803         4    1144       1144  3503937   \n",
       "4             2 -122.306426  47.545739         5   17700      17700  1807429   \n",
       "\n",
       "    STATUS      ADDRTYPE   INTKEY  ... ROADCOND                LIGHTCOND  \\\n",
       "0  Matched  Intersection  37475.0  ...      Wet                 Daylight   \n",
       "1  Matched         Block      NaN  ...      Wet  Dark - Street Lights On   \n",
       "2  Matched         Block      NaN  ...      Dry                 Daylight   \n",
       "3  Matched         Block      NaN  ...      Dry                 Daylight   \n",
       "4  Matched  Intersection  34387.0  ...      Wet                 Daylight   \n",
       "\n",
       "  PEDROWNOTGRNT  SDOTCOLNUM SPEEDING ST_COLCODE  \\\n",
       "0           NaN         NaN      NaN         10   \n",
       "1           NaN   6354039.0      NaN         11   \n",
       "2           NaN   4323031.0      NaN         32   \n",
       "3           NaN         NaN      NaN         23   \n",
       "4           NaN   4028032.0      NaN         10   \n",
       "\n",
       "                                          ST_COLDESC  SEGLANEKEY  \\\n",
       "0                                  Entering at angle           0   \n",
       "1  From same direction - both going straight - bo...           0   \n",
       "2                             One parked--one moving           0   \n",
       "3                   From same direction - all others           0   \n",
       "4                                  Entering at angle           0   \n",
       "\n",
       "   CROSSWALKKEY  HITPARKEDCAR  \n",
       "0             0             N  \n",
       "1             0             N  \n",
       "2             0             N  \n",
       "3             0             N  \n",
       "4             0             N  \n",
       "\n",
       "[5 rows x 38 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"Data-Collisions.csv.1\")\n",
    "df.head() # Display the first 5 rows of the dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Following are the different columns in the dataset and their description from the metadata file.\n",
    "\n",
    "1. SEVERITYCODE - A code that corresponds to the severity of the collision. This is our target variable.\n",
    "2. 'X'\n",
    "3. 'Y'\n",
    "4. OBJECTID - ESRI unique identifier\n",
    "5. INCKEY - A unique key for the incident\n",
    "6. COLDETKEY - Secondary key for the incident\n",
    "7. REPORTNO \n",
    "8. STATUS\n",
    "9. ADDRTYPE - Collision address type\n",
    "10. INTKEY - Key that corresponds to the intersection associated with a collision\n",
    "11. LOCATION - Description of the general location of the collision\n",
    "12. EXCEPTRSNCODE \n",
    "13. EXCEPTRSNDESC\n",
    "14. SEVERITYCODE.1\n",
    "15. SEVERITYDESC - A detailed description of the severity of the collision\n",
    "16. COLLISIONTYPE - Collision type\n",
    "17. PERSONCOUNT - The total number of people involved in the collision\n",
    "18. PEDCOUNT - The number of pedestrians involved in the collision\n",
    "19. PEDCYLCOUNT - The number of bicycles involved in the collision\n",
    "20. VEHCOUNT - The number of vehicles involved in the collision\n",
    "21. INCDATE - The date of the incident\n",
    "22. INCDTTM - The date and time of the incident\n",
    "23. JUNCTIONTYPE - Category of junction at which collision took place\n",
    "24. SDOT_COLCODE - A code given to the collision by SDOT\n",
    "25. SDOT_COLDESC - A description of the collision corresponding to the collision code\n",
    "26. INATTENTIONIND - Whether or not collision was due to inattention\n",
    "27. UNDERINFL - Whether or not a driver involved was under the influence of drugs or alcohol\n",
    "28. WEATHER - A description of the weather conditions during the time of the collision\n",
    "29. ROADCOND - The condition of the road during the collision\n",
    "30. LIGHTCOND - The light conditions during the collision\n",
    "31. PEDROWNOTGRNT - Whether or not the pedestrian right of way was not granted\n",
    "32. SDOTCOLNUM - A number given to the collision by SDOT\n",
    "33. SPEEDING - Whether or not speeding was a factor in the collision\n",
    "34. ST_COLCODE - A code provided by the state that describes the collision\n",
    "35. ST_COLDESC - A description that corresponds to the stateâ€™s coding designation\n",
    "36. SEGLANEKEY - A key for the lane segment in which the collision occurred\n",
    "37. CROSSWALKKEY - A key for the crosswalk at which the collision occurred\n",
    "38. HITPARKEDCAR - Whether or not the collision involved hitting a parked car\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Select the feature variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['SEVERITYCODE', 'X', 'Y', 'OBJECTID', 'INCKEY', 'COLDETKEY', 'REPORTNO',\n",
       "       'STATUS', 'ADDRTYPE', 'INTKEY', 'LOCATION', 'EXCEPTRSNCODE',\n",
       "       'EXCEPTRSNDESC', 'SEVERITYCODE.1', 'SEVERITYDESC', 'COLLISIONTYPE',\n",
       "       'PERSONCOUNT', 'PEDCOUNT', 'PEDCYLCOUNT', 'VEHCOUNT', 'INCDATE',\n",
       "       'INCDTTM', 'JUNCTIONTYPE', 'SDOT_COLCODE', 'SDOT_COLDESC',\n",
       "       'INATTENTIONIND', 'UNDERINFL', 'WEATHER', 'ROADCOND', 'LIGHTCOND',\n",
       "       'PEDROWNOTGRNT', 'SDOTCOLNUM', 'SPEEDING', 'ST_COLCODE', 'ST_COLDESC',\n",
       "       'SEGLANEKEY', 'CROSSWALKKEY', 'HITPARKEDCAR'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Columns in the dataset\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### As a first step, ignore the columns that are redundant, the columns for which there are no descriptions available in the metadata, the columns that have large descriptions as their values and the columns that do not contibute to the prediction of accident severity. That leaves us with the following columns.\n",
    "\n",
    "1. SEVERITYCODE - A code that corresponds to the severity of the collision. This is the target variable.\n",
    "2. ADDRTYPE - Collision address type\n",
    "3. INTKEY - Key that corresponds to the intersection associated with a collision\n",
    "4. COLLISIONTYPE - Collision type\n",
    "5. PERSONCOUNT - The total number of people involved in the collision\n",
    "6. PEDCOUNT - The number of pedestrians involved in the collision\n",
    "7. PEDCYLCOUNT - The number of bicycles involved in the collision\n",
    "8. VEHCOUNT - The number of vehicles involved in the collision\n",
    "9. JUNCTIONTYPE - Category of junction at which collision took place\n",
    "10. INATTENTIONIND - Whether or not collision was due to inattention\n",
    "11. UNDERINFL - Whether or not a driver involved was under the influence of drugs or alcohol\n",
    "12. WEATHER - A description of the weather conditions during the time of the collision\n",
    "13. ROADCOND - The condition of the road during the collision\n",
    "14. LIGHTCOND - The light conditions during the collision\n",
    "15. PEDROWNOTGRNT - Whether or not the pedestrian right of way was not granted\n",
    "16. SPEEDING - Whether or not speeding was a factor in the collision\n",
    "17. HITPARKEDCAR - Whether or not the collision involved hitting a parked car"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Drop the irrelevant columns\n",
    "df.drop(columns = ['OBJECTID','INCKEY','COLDETKEY','X','Y','REPORTNO','STATUS','SDOTCOLNUM','LOCATION','EXCEPTRSNCODE','EXCEPTRSNDESC','SEVERITYCODE.1','SEVERITYDESC','INCDATE','INCDTTM','SDOT_COLDESC','ST_COLDESC','SEGLANEKEY','CROSSWALKKEY','SDOT_COLCODE','ST_COLCODE'],axis = 1,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SEVERITYCODE</th>\n",
       "      <th>ADDRTYPE</th>\n",
       "      <th>INTKEY</th>\n",
       "      <th>COLLISIONTYPE</th>\n",
       "      <th>PERSONCOUNT</th>\n",
       "      <th>PEDCOUNT</th>\n",
       "      <th>PEDCYLCOUNT</th>\n",
       "      <th>VEHCOUNT</th>\n",
       "      <th>JUNCTIONTYPE</th>\n",
       "      <th>INATTENTIONIND</th>\n",
       "      <th>UNDERINFL</th>\n",
       "      <th>WEATHER</th>\n",
       "      <th>ROADCOND</th>\n",
       "      <th>LIGHTCOND</th>\n",
       "      <th>PEDROWNOTGRNT</th>\n",
       "      <th>SPEEDING</th>\n",
       "      <th>HITPARKEDCAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Intersection</td>\n",
       "      <td>37475.0</td>\n",
       "      <td>Angles</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>At Intersection (intersection related)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>Overcast</td>\n",
       "      <td>Wet</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Block</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sideswipe</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Mid-Block (not related to intersection)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Raining</td>\n",
       "      <td>Wet</td>\n",
       "      <td>Dark - Street Lights On</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Block</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Parked Car</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mid-Block (not related to intersection)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Overcast</td>\n",
       "      <td>Dry</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>Block</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Other</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mid-Block (not related to intersection)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>Clear</td>\n",
       "      <td>Dry</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>Intersection</td>\n",
       "      <td>34387.0</td>\n",
       "      <td>Angles</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>At Intersection (intersection related)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Raining</td>\n",
       "      <td>Wet</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SEVERITYCODE      ADDRTYPE   INTKEY COLLISIONTYPE  PERSONCOUNT  PEDCOUNT  \\\n",
       "0             2  Intersection  37475.0        Angles            2         0   \n",
       "1             1         Block      NaN     Sideswipe            2         0   \n",
       "2             1         Block      NaN    Parked Car            4         0   \n",
       "3             1         Block      NaN         Other            3         0   \n",
       "4             2  Intersection  34387.0        Angles            2         0   \n",
       "\n",
       "   PEDCYLCOUNT  VEHCOUNT                             JUNCTIONTYPE  \\\n",
       "0            0         2   At Intersection (intersection related)   \n",
       "1            0         2  Mid-Block (not related to intersection)   \n",
       "2            0         3  Mid-Block (not related to intersection)   \n",
       "3            0         3  Mid-Block (not related to intersection)   \n",
       "4            0         2   At Intersection (intersection related)   \n",
       "\n",
       "  INATTENTIONIND UNDERINFL   WEATHER ROADCOND                LIGHTCOND  \\\n",
       "0            NaN         N  Overcast      Wet                 Daylight   \n",
       "1            NaN         0   Raining      Wet  Dark - Street Lights On   \n",
       "2            NaN         0  Overcast      Dry                 Daylight   \n",
       "3            NaN         N     Clear      Dry                 Daylight   \n",
       "4            NaN         0   Raining      Wet                 Daylight   \n",
       "\n",
       "  PEDROWNOTGRNT SPEEDING HITPARKEDCAR  \n",
       "0           NaN      NaN            N  \n",
       "1           NaN      NaN            N  \n",
       "2           NaN      NaN            N  \n",
       "3           NaN      NaN            N  \n",
       "4           NaN      NaN            N  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(194673, 17)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the size of the dataset\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SEVERITYCODE           0\n",
       "ADDRTYPE            1926\n",
       "INTKEY            129603\n",
       "COLLISIONTYPE       4904\n",
       "PERSONCOUNT            0\n",
       "PEDCOUNT               0\n",
       "PEDCYLCOUNT            0\n",
       "VEHCOUNT               0\n",
       "JUNCTIONTYPE        6329\n",
       "INATTENTIONIND    164868\n",
       "UNDERINFL           4884\n",
       "WEATHER             5081\n",
       "ROADCOND            5012\n",
       "LIGHTCOND           5170\n",
       "PEDROWNOTGRNT     190006\n",
       "SPEEDING          185340\n",
       "HITPARKEDCAR           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for null values in the dataset\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### INTKEY, INATTENTIONIND, PEDROWNOTGRNT and SPEEDING columns have mostly null values. Hence, we will remove those columns from the dataframe. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns = [\"INTKEY\",\"INATTENTIONIND\",\"PEDROWNOTGRNT\",\"SPEEDING\"],axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Now we have reduced the number of columns to the following.\n",
    "\n",
    "1. SEVERITYCODE - A code that corresponds to the severity of the collision. This is the target variable.\n",
    "2. ADDRTYPE - Collision address type\n",
    "3. COLLISIONTYPE - Collision type\n",
    "4. PERSONCOUNT - The total number of people involved in the collision\n",
    "5. PEDCOUNT - The number of pedestrians involved in the collision\n",
    "6. PEDCYLCOUNT - The number of bicycles involved in the collision\n",
    "7. VEHCOUNT - The number of vehicles involved in the collision\n",
    "8. JUNCTIONTYPE - Category of junction at which collision took place\n",
    "9. UNDERINFL - Whether or not a driver involved was under the influence of drugs or alcohol\n",
    "10. WEATHER - A description of the weather conditions during the time of the collision\n",
    "11. ROADCOND - The condition of the road during the collision\n",
    "12. LIGHTCOND - The light conditions during the collision\n",
    "13. HITPARKEDCAR - Whether or not the collision involved hitting a parked car"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SEVERITYCODE</th>\n",
       "      <th>ADDRTYPE</th>\n",
       "      <th>COLLISIONTYPE</th>\n",
       "      <th>PERSONCOUNT</th>\n",
       "      <th>PEDCOUNT</th>\n",
       "      <th>PEDCYLCOUNT</th>\n",
       "      <th>VEHCOUNT</th>\n",
       "      <th>JUNCTIONTYPE</th>\n",
       "      <th>UNDERINFL</th>\n",
       "      <th>WEATHER</th>\n",
       "      <th>ROADCOND</th>\n",
       "      <th>LIGHTCOND</th>\n",
       "      <th>HITPARKEDCAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Intersection</td>\n",
       "      <td>Angles</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>At Intersection (intersection related)</td>\n",
       "      <td>N</td>\n",
       "      <td>Overcast</td>\n",
       "      <td>Wet</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Block</td>\n",
       "      <td>Sideswipe</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Mid-Block (not related to intersection)</td>\n",
       "      <td>0</td>\n",
       "      <td>Raining</td>\n",
       "      <td>Wet</td>\n",
       "      <td>Dark - Street Lights On</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Block</td>\n",
       "      <td>Parked Car</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mid-Block (not related to intersection)</td>\n",
       "      <td>0</td>\n",
       "      <td>Overcast</td>\n",
       "      <td>Dry</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>Block</td>\n",
       "      <td>Other</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mid-Block (not related to intersection)</td>\n",
       "      <td>N</td>\n",
       "      <td>Clear</td>\n",
       "      <td>Dry</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>Intersection</td>\n",
       "      <td>Angles</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>At Intersection (intersection related)</td>\n",
       "      <td>0</td>\n",
       "      <td>Raining</td>\n",
       "      <td>Wet</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SEVERITYCODE      ADDRTYPE COLLISIONTYPE  PERSONCOUNT  PEDCOUNT  \\\n",
       "0             2  Intersection        Angles            2         0   \n",
       "1             1         Block     Sideswipe            2         0   \n",
       "2             1         Block    Parked Car            4         0   \n",
       "3             1         Block         Other            3         0   \n",
       "4             2  Intersection        Angles            2         0   \n",
       "\n",
       "   PEDCYLCOUNT  VEHCOUNT                             JUNCTIONTYPE UNDERINFL  \\\n",
       "0            0         2   At Intersection (intersection related)         N   \n",
       "1            0         2  Mid-Block (not related to intersection)         0   \n",
       "2            0         3  Mid-Block (not related to intersection)         0   \n",
       "3            0         3  Mid-Block (not related to intersection)         N   \n",
       "4            0         2   At Intersection (intersection related)         0   \n",
       "\n",
       "    WEATHER ROADCOND                LIGHTCOND HITPARKEDCAR  \n",
       "0  Overcast      Wet                 Daylight            N  \n",
       "1   Raining      Wet  Dark - Street Lights On            N  \n",
       "2  Overcast      Dry                 Daylight            N  \n",
       "3     Clear      Dry                 Daylight            N  \n",
       "4   Raining      Wet                 Daylight            N  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SEVERITYCODE        0\n",
       "ADDRTYPE         1926\n",
       "COLLISIONTYPE    4904\n",
       "PERSONCOUNT         0\n",
       "PEDCOUNT            0\n",
       "PEDCYLCOUNT         0\n",
       "VEHCOUNT            0\n",
       "JUNCTIONTYPE     6329\n",
       "UNDERINFL        4884\n",
       "WEATHER          5081\n",
       "ROADCOND         5012\n",
       "LIGHTCOND        5170\n",
       "HITPARKEDCAR        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for null values in the dataset\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Examine the correlation between the different feature variables identified so far and the target variable through various plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SEVERITYCODE      int64\n",
       "ADDRTYPE         object\n",
       "COLLISIONTYPE    object\n",
       "PERSONCOUNT       int64\n",
       "PEDCOUNT          int64\n",
       "PEDCYLCOUNT       int64\n",
       "VEHCOUNT          int64\n",
       "JUNCTIONTYPE     object\n",
       "UNDERINFL        object\n",
       "WEATHER          object\n",
       "ROADCOND         object\n",
       "LIGHTCOND        object\n",
       "HITPARKEDCAR     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Data types of the variables\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ADDRTYPE vs SEVERITYCODE\n",
    "plt.figure(figsize = (12,6))\n",
    "df.groupby(\"ADDRTYPE\")[\"SEVERITYCODE\"].value_counts().plot(kind='bar');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# COLLISIONTYPE vs SEVERITYCODE\n",
    "plt.figure(figsize = (12,6))\n",
    "df.groupby(\"COLLISIONTYPE\")[\"SEVERITYCODE\"].value_counts().plot(kind='bar');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# PERSONCOUNT vs SEVERITYCODE\n",
    "plt.figure(figsize = (12,6))\n",
    "sns.barplot(x = \"SEVERITYCODE\",y = \"PERSONCOUNT\",data = df);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# PEDCOUNT vs SEVERITYCODE\n",
    "plt.figure(figsize = (12,6))\n",
    "sns.barplot(x = \"SEVERITYCODE\",y = \"PEDCOUNT\",data = df);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# PEDCYLCOUNT vs SEVERITYCODE\n",
    "plt.figure(figsize = (12,6))\n",
    "sns.barplot(x = \"SEVERITYCODE\",y = \"PEDCYLCOUNT\",data = df);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# VEHCOUNT vs SEVERITYCODE\n",
    "plt.figure(figsize = (12,6))\n",
    "sns.barplot(x = \"SEVERITYCODE\",y = \"VEHCOUNT\",data = df);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# JUNCTIONTYPE vs SEVERITYCODE\n",
    "plt.figure(figsize = (12,6))\n",
    "df.groupby(\"JUNCTIONTYPE\")[\"SEVERITYCODE\"].value_counts().plot(kind='bar');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# UNDERINFL vs SEVERITYCODE\n",
    "plt.figure(figsize = (16,6))\n",
    "df.groupby(\"UNDERINFL\")[\"SEVERITYCODE\"].value_counts().plot(kind='bar');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# WEATHER vs SEVERITYCODE\n",
    "plt.figure(figsize = (12,6))\n",
    "df.groupby(\"WEATHER\")[\"SEVERITYCODE\"].value_counts().plot(kind='bar');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ROADCOND vs SEVERITYCODE\n",
    "plt.figure(figsize = (12,6))\n",
    "df.groupby(\"ROADCOND\")[\"SEVERITYCODE\"].value_counts().plot(kind='bar');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# LIGHTCOND vs SEVERITYCODE\n",
    "plt.figure(figsize = (12,6))\n",
    "df.groupby(\"LIGHTCOND\")[\"SEVERITYCODE\"].value_counts().plot(kind='bar');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# HITPARKEDCAR vs SEVERITYCODE\n",
    "plt.figure(figsize = (12,6))\n",
    "df.groupby(\"HITPARKEDCAR\")[\"SEVERITYCODE\"].value_counts().plot(kind='bar');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### From the above plots, we see that PERSONCOUNT and VEHCOUNT  are poorly correlated with SEVERITYCODE. Hence, we will drop those variables from our feature set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns = ['PERSONCOUNT','VEHCOUNT'],axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SEVERITYCODE</th>\n",
       "      <th>ADDRTYPE</th>\n",
       "      <th>COLLISIONTYPE</th>\n",
       "      <th>PEDCOUNT</th>\n",
       "      <th>PEDCYLCOUNT</th>\n",
       "      <th>JUNCTIONTYPE</th>\n",
       "      <th>UNDERINFL</th>\n",
       "      <th>WEATHER</th>\n",
       "      <th>ROADCOND</th>\n",
       "      <th>LIGHTCOND</th>\n",
       "      <th>HITPARKEDCAR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Intersection</td>\n",
       "      <td>Angles</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>At Intersection (intersection related)</td>\n",
       "      <td>N</td>\n",
       "      <td>Overcast</td>\n",
       "      <td>Wet</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Block</td>\n",
       "      <td>Sideswipe</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Mid-Block (not related to intersection)</td>\n",
       "      <td>0</td>\n",
       "      <td>Raining</td>\n",
       "      <td>Wet</td>\n",
       "      <td>Dark - Street Lights On</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Block</td>\n",
       "      <td>Parked Car</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Mid-Block (not related to intersection)</td>\n",
       "      <td>0</td>\n",
       "      <td>Overcast</td>\n",
       "      <td>Dry</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>Block</td>\n",
       "      <td>Other</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Mid-Block (not related to intersection)</td>\n",
       "      <td>N</td>\n",
       "      <td>Clear</td>\n",
       "      <td>Dry</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>Intersection</td>\n",
       "      <td>Angles</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>At Intersection (intersection related)</td>\n",
       "      <td>0</td>\n",
       "      <td>Raining</td>\n",
       "      <td>Wet</td>\n",
       "      <td>Daylight</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SEVERITYCODE      ADDRTYPE COLLISIONTYPE  PEDCOUNT  PEDCYLCOUNT  \\\n",
       "0             2  Intersection        Angles         0            0   \n",
       "1             1         Block     Sideswipe         0            0   \n",
       "2             1         Block    Parked Car         0            0   \n",
       "3             1         Block         Other         0            0   \n",
       "4             2  Intersection        Angles         0            0   \n",
       "\n",
       "                              JUNCTIONTYPE UNDERINFL   WEATHER ROADCOND  \\\n",
       "0   At Intersection (intersection related)         N  Overcast      Wet   \n",
       "1  Mid-Block (not related to intersection)         0   Raining      Wet   \n",
       "2  Mid-Block (not related to intersection)         0  Overcast      Dry   \n",
       "3  Mid-Block (not related to intersection)         N     Clear      Dry   \n",
       "4   At Intersection (intersection related)         0   Raining      Wet   \n",
       "\n",
       "                 LIGHTCOND HITPARKEDCAR  \n",
       "0                 Daylight            N  \n",
       "1  Dark - Street Lights On            N  \n",
       "2                 Daylight            N  \n",
       "3                 Daylight            N  \n",
       "4                 Daylight            N  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(194673, 11)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Following is the final set of feature variables that we will use to predict accident severity\n",
    "\n",
    "1. ADDRTYPE\n",
    "2. COLLISIONTYPE\n",
    "3. PEDCOUNT\n",
    "4. PEDCYLCOUNT\n",
    "5. JUNCTIONTYPE\n",
    "6. UNDERINFL\n",
    "7. WEATHER\n",
    "8. ROADCOND\n",
    "9. LIGHTCOND\n",
    "10. HITPARKEDCAR"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove the rows that have null values\n",
    "df.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SEVERITYCODE     0\n",
       "ADDRTYPE         0\n",
       "COLLISIONTYPE    0\n",
       "PEDCOUNT         0\n",
       "PEDCYLCOUNT      0\n",
       "JUNCTIONTYPE     0\n",
       "UNDERINFL        0\n",
       "WEATHER          0\n",
       "ROADCOND         0\n",
       "LIGHTCOND        0\n",
       "HITPARKEDCAR     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for null values in the dataset\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Balance the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    126270\n",
       "2     56625\n",
       "Name: SEVERITYCODE, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check if the dataset is imbalanced\n",
    "df[\"SEVERITYCODE\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the severity code value count to visually understand the magnitude of the dataset imbalance\n",
    "sns.countplot(df[\"SEVERITYCODE\"]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    126270\n",
       "1    126270\n",
       "Name: SEVERITYCODE, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Balance the dataset\n",
    "## Separate majority and minority classes\n",
    "from sklearn.utils import resample\n",
    "df_sev1 = df[df.SEVERITYCODE==1]\n",
    "df_sev2 = df[df.SEVERITYCODE==2]\n",
    " \n",
    "# Upsample minority class\n",
    "df_sev2_upsampled = resample(df_sev2, \n",
    "                                 replace=True,     # sample with replacement\n",
    "                                 n_samples=126270, # to match majority class\n",
    "                                 random_state=123) # reproducible results\n",
    " \n",
    "# Combine majority class with upsampled minority class\n",
    "df = pd.concat([df_sev1, df_sev2_upsampled])\n",
    " \n",
    "# Display new class counts\n",
    "df[\"SEVERITYCODE\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the severity code value count to visually understand the magnitude of the dataset imbalance\n",
    "sns.countplot(df[\"SEVERITYCODE\"]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Check the individual values for each categorical variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Block', 'Intersection', 'Alley'], dtype=object)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"ADDRTYPE\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Sideswipe', 'Parked Car', 'Other', 'Angles', 'Rear Ended',\n",
       "       'Left Turn', 'Cycles', 'Pedestrian', 'Right Turn', 'Head On'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"COLLISIONTYPE\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Mid-Block (not related to intersection)',\n",
       "       'At Intersection (intersection related)', 'Driveway Junction',\n",
       "       'Mid-Block (but intersection related)',\n",
       "       'At Intersection (but not related to intersection)',\n",
       "       'Ramp Junction', 'Unknown'], dtype=object)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"JUNCTIONTYPE\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['0', 'N', '1', 'Y'], dtype=object)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"UNDERINFL\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace all 'N's with '0's and 'Y's with '1's\n",
    "df[\"UNDERINFL\"].replace('N','0',inplace = True)\n",
    "df[\"UNDERINFL\"].replace('Y','1',inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['0', '1'], dtype=object)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"UNDERINFL\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Raining', 'Overcast', 'Clear', 'Unknown', 'Other', 'Snowing',\n",
       "       'Sleet/Hail/Freezing Rain', 'Fog/Smog/Smoke', 'Blowing Sand/Dirt',\n",
       "       'Severe Crosswind', 'Partly Cloudy'], dtype=object)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"WEATHER\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Wet', 'Dry', 'Unknown', 'Snow/Slush', 'Ice', 'Other',\n",
       "       'Sand/Mud/Dirt', 'Standing Water', 'Oil'], dtype=object)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"ROADCOND\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Dark - Street Lights On', 'Daylight', 'Dark - No Street Lights',\n",
       "       'Unknown', 'Dusk', 'Other', 'Dawn', 'Dark - Unknown Lighting',\n",
       "       'Dark - Street Lights Off'], dtype=object)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"LIGHTCOND\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['N', 'Y'], dtype=object)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"HITPARKEDCAR\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace all 'N's with '0's and 'Y's with '1's\n",
    "df[\"HITPARKEDCAR\"].replace('N','0',inplace = True)\n",
    "df[\"HITPARKEDCAR\"].replace('Y','1',inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['0', '1'], dtype=object)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"HITPARKEDCAR\"].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convert all categorical data to continuous data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SEVERITYCODE</th>\n",
       "      <th>PEDCOUNT</th>\n",
       "      <th>PEDCYLCOUNT</th>\n",
       "      <th>UNDERINFL</th>\n",
       "      <th>HITPARKEDCAR</th>\n",
       "      <th>ADDRTYPE_Alley</th>\n",
       "      <th>ADDRTYPE_Block</th>\n",
       "      <th>ADDRTYPE_Intersection</th>\n",
       "      <th>COLLISIONTYPE_Angles</th>\n",
       "      <th>COLLISIONTYPE_Cycles</th>\n",
       "      <th>...</th>\n",
       "      <th>LIGHTCOND_Unknown</th>\n",
       "      <th>ROADCOND_Dry</th>\n",
       "      <th>ROADCOND_Ice</th>\n",
       "      <th>ROADCOND_Oil</th>\n",
       "      <th>ROADCOND_Other</th>\n",
       "      <th>ROADCOND_Sand/Mud/Dirt</th>\n",
       "      <th>ROADCOND_Snow/Slush</th>\n",
       "      <th>ROADCOND_Standing Water</th>\n",
       "      <th>ROADCOND_Unknown</th>\n",
       "      <th>ROADCOND_Wet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 54 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   SEVERITYCODE  PEDCOUNT  PEDCYLCOUNT UNDERINFL HITPARKEDCAR  ADDRTYPE_Alley  \\\n",
       "1             1         0            0         0            0               0   \n",
       "2             1         0            0         0            0               0   \n",
       "3             1         0            0         0            0               0   \n",
       "5             1         0            0         0            0               0   \n",
       "6             1         0            0         0            0               0   \n",
       "\n",
       "   ADDRTYPE_Block  ADDRTYPE_Intersection  COLLISIONTYPE_Angles  \\\n",
       "1               1                      0                     0   \n",
       "2               1                      0                     0   \n",
       "3               1                      0                     0   \n",
       "5               0                      1                     1   \n",
       "6               0                      1                     1   \n",
       "\n",
       "   COLLISIONTYPE_Cycles  ...  LIGHTCOND_Unknown  ROADCOND_Dry  ROADCOND_Ice  \\\n",
       "1                     0  ...                  0             0             0   \n",
       "2                     0  ...                  0             1             0   \n",
       "3                     0  ...                  0             1             0   \n",
       "5                     0  ...                  0             1             0   \n",
       "6                     0  ...                  0             0             0   \n",
       "\n",
       "   ROADCOND_Oil  ROADCOND_Other  ROADCOND_Sand/Mud/Dirt  ROADCOND_Snow/Slush  \\\n",
       "1             0               0                       0                    0   \n",
       "2             0               0                       0                    0   \n",
       "3             0               0                       0                    0   \n",
       "5             0               0                       0                    0   \n",
       "6             0               0                       0                    0   \n",
       "\n",
       "   ROADCOND_Standing Water  ROADCOND_Unknown  ROADCOND_Wet  \n",
       "1                        0                 0             1  \n",
       "2                        0                 0             0  \n",
       "3                        0                 0             0  \n",
       "5                        0                 0             0  \n",
       "6                        0                 0             1  \n",
       "\n",
       "[5 rows x 54 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.get_dummies(df, columns=[\"ADDRTYPE\",\"COLLISIONTYPE\",\"JUNCTIONTYPE\",\"WEATHER\",\"LIGHTCOND\",\"ROADCOND\"])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
